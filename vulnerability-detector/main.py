# -*- coding: utf-8 -*-
"""
Created on Mon Aug 26 06:51:08 2019

@author: Daniel Lin
"""

import yaml
import argparse
from keras import backend as K
from src.helper import Inference
from types import SimpleNamespace


CONFIG_PATH = 'config/config.yaml'
IS_INFERENCE = True
IS_VERBOSE = 0
TRAINED_MODEL_PATH = 'model.h5'
EMBEDDING = "word2vec"
IS_TEST = True


# data = {
#     "config":CONFIG_PATH, 
#     "inference": IS_INFERENCE,
#     "verbose": IS_VERBOSE,
#     "trained_model": TRAINED_MODEL_PATH,
#     "embedding": EMBEDDING,
#     "test": IS_TEST
#     }
default_paras = SimpleNamespace(config=CONFIG_PATH, inference=IS_INFERENCE, verbose=IS_VERBOSE, trained_model=TRAINED_MODEL_PATH, embedding=EMBEDDING, test=IS_TEST)

def predict(inference_path:str, paras: SimpleNamespace = default_paras):
    with open(paras.config, 'r') as f:
        config = yaml.safe_load(f)
    config["inference_settings"]["inference_path"] = inference_path

    # print(config, paras)
    helper = Inference(config, paras)
    res = helper.predict_vulnerability()
    K.clear_session()
    return res


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Training a vulnerability detection model.')
    parser.add_argument('--config', type=str,default=CONFIG_PATH,
                        help='Path to the configuration file.')
    parser.add_argument('--embedding', default=EMBEDDING, type=str,
                        help='The embedding method for converting source code sequences to meaningful vector representations. Currently, we also support GloVe and FastText.')
    parser.add_argument('--test',default=IS_TEST, action='store_true', help='Test the model.')
    parser.add_argument('--trained_model', type=str,default=TRAINED_MODEL_PATH,
                        help='The path of the trained model for test.')
    parser.add_argument('--verbose', default=IS_VERBOSE, help='Show all messages.')
    parser.add_argument('--inference', action='store_true',default=IS_INFERENCE,
        help='Prediction of vulnerable/non vulnerable')
    paras = parser.parse_args()
    predict(inference_path="inference/", paras=paras)

    